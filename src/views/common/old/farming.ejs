<%- include('./common/header') %>
<main>
    <section class="breadcrumb-area pt-40 pb-40 bg_img" data-background="/images/bg/breadcrumb-bg-1.jpeg" data-overlay="dark" data-opacity="5">
        <div class="container">
            <div class="row">
                <div class="col-xl-12 text-center">
                    <h2 class="page-title">TMAC BNB LP POOL</h2>
                    <div class="cafena-breadcrumb breadcrumbs">
                        <ul class="list-unstyled d-flex align-items-center justify-content-center">
                            <li class="cafenabcrumb-item duxinbcrumb-begin">
                                <span class="bread_msg">STAKE TMAC_BNB LP TOKENS To EARN BNB</span>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <section class="wcu__area pb-50 pt-80 farm_m_sec">
        <div class="container">
            <div class="row mt-none-30">
                <div class="col-md-6 mt-20 text-center">
                    <div class="wcu__item farm_item">
                        <div class="icon icon-rt"><img src="/images/icons/wcu-1.png" alt="tmac_farming"></div>
                        <div class="content cont-rt">
                            <h2>LP Staking</h2>
                            <h3 class="user_stk">0</h3>
                            <h5>My Staked LP Tokens</h5>
                            <button class="site-btn mt-10 app_btn">Approve TMAC/BNB LP</button>
                            <div class="stk_sec mt-10" style="display: none;">
                                <button class="site-btn stk_btn" disabled>STAKE</button>
                                <button class="site-btn unstk_btn" disabled>UNSTAKE</button>
                            </div>
                            <h4><i class="fas fa-arrow-right out_icon"></i><a class="farm_links" href="https://bscscan.com/address/0xaf6fc1929814f3af4e1e26567c7e0415d69cf878" target="_blank">VIEW on BSC Scan</a></h4>
                        </div>
                    </div>
                </div>
                <div class="col-md-6 mt-20 text-center">
                    <div class="wcu__item farm_item">
                        <div class="icon icon-rt"><img src="/images/icons/wcu-3.png" alt="tmac_farming"></div>
                        <div class="content cont-rt">
                            <h2>Rewards</h2>
                            <h3 class="user_earnings">0</h3>
                            <h5>BNB Tokens Earned</h5>
                            <a class="site-btn mt-10 wid_db_btn" id="btnWithdraw2" disabled>Withdraw</a>
                            <div class="wid_sec mt-10" style="display:flex;display: none;">
                                <button class="site-btn wid_btn" disabled>WITHDRAW</button>
                                <button class="site-btn ext_btn" disabled>EXIT</button>
                            </div>
                            <h4><i class="fas fa-arrow-right out_icon"></i><a class="farm_links" href="https://pancakeswap.finance/swap?inputCurrency=0x6421282c7f14670d738f4651311c5a1286e46484&outputCurrency=0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c" target="_blank">Trade on Pancakeswap</a></h4>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <section id="feature_section" class="feature_section pt-20 pb-80">
        <div class="container">
            <div class="row justify-content-center">
                <div class="col-lg-3 col-md-4 col-sm-6 wow fadeInUp2" data-wow-delay=".1s">
                    <div class="features_item box_stat farm_box">
                        <div class="item_icon"><img src="/images/icons/f-icon-3.png" alt="earn_bnb"></div>
                        <h2 class="mb-2 tot_staked">0</h2>
                        <h3 class="item_title mb-0">Total Staked</h3>
                    </div>
                </div>

                <div class="col-lg-3 col-md-4 col-sm-6 wow fadeInUp2" data-wow-delay=".2s">
                    <div class="features_item box_stat farm_box">
                        <div class="item_icon"><img src="/images/icons/f-icon-1.png" alt="tmac_bnb"></div>
                        <h2 class="mb-2 myShare">0</h2>
                        <h3 class="item_title mb-0">My Share</h3>
                    </div>
                </div>

                <div class="col-lg-3 col-md-4 col-sm-6 wow fadeInUp2" data-wow-delay=".3s">
                    <div class="features_item box_stat farm_box">
                        <div class="item_icon"><img src="/images/icons/f-icon-4.png" alt="tmac_token"></div>
                        <h2 class="mb-2 pol_supply">0</h2>
                        <h3 class="item_title mb-0">Pool Supply</h3>
                    </div>
                </div>
            </div>
        </div>
    </section>
</main>
<div class="modal fade" id="stake_modal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal_me_top" role="document"><div class="modal-content modal-custom modal_me_custom"><div class="modal-body thirty_pad">
        <div class="transfer-respond">
            <h4 class="modal_me_title ab_font">STAKE TMAC/BNB LP Tokens</h4>
            <label class="six_hun"><span class="user_lp_bal">0</span> TMAC-BNB LP Available</label>
            <div class="row line mt-20"><div class="col-md-12"><div class="form-group">
                <div class="input-group mb-3"><input type="text" class="form-control" name="stk_amt" id="stk_amt" placeholder="Enter Amount to Stake"><div class="input-group-append"><div class="input-group-text mb-deck modal_deck"> TMAC/BNB LP</div></div>
            </div> </div></div></div>
            <center><button type="submit" class="btn btn_primary stk_mod_btn"><span class="stk_mod_txt">STAKE</span></button></center>
        </div>
     </div></div></div>
</div>
<div class="modal fade" id="unstake_modal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal_me_top" role="document"><div class="modal-content modal-custom modal_me_custom"><div class="modal-body thirty_pad">
        <div class="transfer-respond">
            <h4 class="modal_me_title ab_font">UNSTAKE TMAC/BNB LP Tokens</h4>
            <label class="six_hun"><span class="user_stk_bal">0</span> TMAC-BNB LP Staked</label>
            <div class="row line mt-20"><div class="col-md-12"><div class="form-group">
                <div class="input-group mb-3"><input type="text" class="form-control" name="unstk_amt" id="unstk_amt" placeholder="Enter Amount to UNStake"><div class="input-group-append"><div class="input-group-text mb-deck modal_deck"> TMAC/BNB LP</div></div>
            </div> </div></div></div>
            <center><button type="submit" class="btn btn_primary unstk_mod_btn"><span class="unstk_mod_txt">UNSTAKE</span></button></center>
        </div>
     </div></div></div>
</div>
<%- include('./common/footer') %>
<script type="text/javascript">

    window.addEventListener('load', async () => {
        init();
        switchNetwork();
        if (window.ethereum) {
            let selectedAccount = null;
            try {
                const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' })
                //const accounts = await web3.eth.getAccounts();
                if (accounts == null || accounts.length == 0) {
                console.log("NO ACCOUNT CONNECTED");
                document.querySelector("#connectedAdd").style.display = "none";
                document.querySelector("#prepare").style.display = "block";
                } else {
                    if (selectedAccount != accounts[0]) {
                        selectedAccount = accounts[0];
                    }
                    window.localStorage.setItem("userAddress", selectedAccount);
                    document.querySelector("#prepare").style.display = "none";
                    document.querySelector("#connectedAdd").style.display = "block";
                    $('#connectWallet').html(getUserAddress(selectedAccount));
                    $("#connectWallet").click(function(){ window.open("https://bscscan.com/address/" + selectedAccount, '_blank')});
                }
            } catch (error) {
                console.error(error);
            }

            try { provider = web3.currentProvider;
                if (typeof web3 !== 'undefined') {
                    web3 = new Web3(web3.currentProvider);
                } else {
                    // set the provider you want from Web3.providers
                    //web3 = new Web3("https://cloudflare-eth.com");
                    web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:8545"));
                }
            } catch(e) { console.log("Could not get a wallet connection", e);
            return;
            }
            await getData()            
            provider.on("accountsChanged", (accounts) => {console.log('Account changed');window.location.href = "";});
            provider.on("chainChanged", (chainId) => {console.log('Chain changed');window.location.href = "";});
            provider.on("networkChanged", (networkId) => {console.log('Network changed');window.location.href = "";});
        }
        document.querySelector("#btn-connect").addEventListener("click", onConnect);
    });
    async function onConnect() {
        try {
            provider = await web3Modal.connect();
        }     catch(e) {
            console.log("Could not get a wallet connection", e);
            return;
        }
        await getData();
    }
    async function getData() {
        const web3 = new Web3(provider);
        const accounts = await web3.eth.getAccounts();
        selectedAccount = accounts[0];
        //console.log(selectedAccount)
        if (selectedAccount == null || selectedAccount.length == 0) {console.log('no account')
            document.querySelector("#connectedAdd").style.display = "none";
            document.querySelector("#prepare").style.display = "block";
        }else{
            if (selectedAccount != accounts[0]) {
                selectedAccount = accounts[0];
            }
            document.querySelector("#prepare").style.display = "none";
            document.querySelector("#connectedAdd").style.display = "block";
            $('#connectWallet').html(getUserAddress(selectedAccount));
            $("#connectWallet").click(function(){ window.open("https://bscscan.com/address/" + selectedAccount, '_blank')});
            lpContractInstance = new web3.eth.Contract(lp_ABI, lp_contract_address, {from: selectedAccount,
            });
            farmingContractInstance = new web3.eth.Contract(farming_ABI, farming_contract, {from: selectedAccount,
            });
            await updateData()
        }

    }

    async function updateData() {
        setInterval(async () => {
            if (selectedAccount != null){
                const allowance = await lpContractInstance.methods.allowance(selectedAccount, farming_contract).call();
                
                var user_lp_balance = await lpContractInstance.methods.balanceOf(selectedAccount).call();
                user_lp_balance = (user_lp_balance / 1e18) //.toFixed(10); //user lp bal for staking
                if (user_lp_balance > 0) {$('.user_lp_bal').html(user_lp_balance) }
                
                var staked = await farmingContractInstance.methods.balanceOf(selectedAccount).call();
                user_stake = parseFloat(staked / 1e18); //.toFixed(4);//user staked
                $('.user_stk').html(user_stake);
                $('.user_stk_bal').html(user_stake);
                
                var reward = await farmingContractInstance.methods.earned(selectedAccount).call();
                user_earn = parseFloat(reward / 1e18).toFixed(8);//user reward
                if (user_earn > 0) {
                    $('.user_earnings').html(user_earn);
                    $('#btnWithdraw2').hide();
                    $('.wid_sec').show();
                    $('.wid_btn').prop('disabled', false);
                    $('.ext_btn').prop('disabled', false);
                }else{
                    $('.user_earnings').html(user_earn);
                    $('#btnWithdraw2').show();
                    $('.wid_sec').hide();
                }
                
                var totalSupply = await farmingContractInstance.methods.totalSupply().call();
                totalSupply = parseFloat(totalSupply / 1e18);  //.toFixed(4); // total staked amount
                $('.tot_staked').html(totalSupply); 
                
                var myShare = (user_stake / totalSupply) * 100;
                myShare = myShare.toFixed(2); //user staking share
                $('.myShare').html(myShare + '%');
                
                var polSupply = await farmingContractInstance.methods.polSupply().call();
                polSupply = parseFloat(polSupply / 1e18).toFixed(6); //available pool reward
                $('.pol_supply').html(polSupply);
                // start putting data in UI
                //console.log(allowance)
                if (allowance > 0) {
                    
                    $(".app_btn").css("display", "none").prop('disabled', true); 
                    $(".stk_sec").show(); $(".stk_btn").prop('disabled', false); 
                    $(".unstk_btn").prop('disabled', false); 
                } else { 
                    $(".app_btn").show().prop('disabled', false); 
                    $(".stk_sec").hide(); $(".stk_btn").prop('disabled', true); 
                    $(".unstk_btn").prop('disabled', true); 
                    $("#stake_modal").modal("hide"); $("#unstake_modal").modal("hide"); 
                }
            }else{
                console.log('Please connect to MetaMask this one.')
                $(".app_btn").show().prop('disabled', false); 
                $(".stk_sec").hide(); $(".stk_btn").prop('disabled', true); 
                $(".unstk_btn").prop('disabled', true); 
                $("#stake_modal").modal("hide"); $("#unstake_modal").modal("hide"); 
            }
        }, 3000)
    }

    $('.app_btn').click(async function () {
        //approve tokens
        $('.app_btn').html('Approving...');
        //maxApproveLimit = await lpContractInstance.methods.totalSupply().call();
        maxApproveLimit='9991111111111111111';
        var result = await lpContractInstance.methods.approve(farming_contract, maxApproveLimit).send({
            from: selectedAccount,
            to: lp_contract_address,
            gasPrice: 10000000000,
            gasLimit: 50000,
            //value : 0,       
        });
        if (result.status) {
            toastr.success('Transaction Initiated. Check status on <a href="' + bscscanTxURL + result.transactionHash + '" target="_blank">BscScan</a>');
            $('#btnApprove').hide();
            $('.stk_sec').show();
        } else {
            toastr.error('Transaction Failed. Try Again.');
        }
    });
    $('.stk_btn').click(async function () { $("#stake_modal").appendTo("body").modal("show"); });
    $('.stk_mod_btn').click(async function () {
        let stk_amt = $('#stk_amt').val();let lp_bal = $('.user_lp_bal').html(); let tok = "TRX";
        if (!$.trim(stk_amt).length) { toastr.error('Not a valid amount'); return false; }
        if (parseFloat(stk_amt) <= 0) { toastr.error('Not a valid amount'); return false; }
        if (parseFloat(stk_amt) > parseFloat(lp_bal)) { toastr.error('Not enough token balance'); return false; }
        let stk_amt_val = stk_amt * 1e18;
        $('.stk_mod_txt').html('Staking...'); $('.stk_mod_btn').attr("disabled", true);
        let referrer = await farmingContractInstance.methods.referrerInfo(selectedAccount).call();
        let stakedAmt = await farmingContractInstance.methods.balanceOf(selectedAccount).call();
        let refVal='<%-refVal%>';let dRef='0x0000000000000000000000000000000000000000';
        if(referrer && referrer != dRef){refAddress=referrer}
        else if(referrer && referrer==dRef && stakedAmt>0){refAddress=referrer}
        else if(referrer && referrer==dRef && stakedAmt<=0){if(!refVal){refAddress=dRef}else{refAddress=refVal}}else{refAddress==dRef}
        var result = await farmingContractInstance.methods.stake(refAddress, stk_amt_val).send({
            from: selectedAccount,
            to: farming_contract,
            gasPrice: 10000000000,
            gasLimit: 1000000,
            //value : 0,       
        });
        if (result.status) {
            $('.stk_mod_txt').html('Stake'); $('.stk_mod_btn').attr("disabled", false)
            $("#stake_modal").modal("hide");
            toastr.success('Transaction Initiated. Check status on <a href="' + bscscanTxURL + result.transactionHash + '" target="_blank">BscScan</a>');
            //checkStaked();
        } else {
            toastr.error('Transaction Failed. Try Again.');
            $('.stk_mod_txt').html('Stake'); $('.stk_mod_btn').attr("disabled", false)
        }
    });
    $('.unstk_btn').click(async function () { $("#unstake_modal").appendTo("body").modal("show"); });
    $('.unstk_mod_btn').click(async function () {
        let unstk_amt = $('#unstk_amt').val(); let user_stk_bal = $('.user_stk_bal').html();
        //console.log(unstk_amt) 
        if (!$.trim(unstk_amt).length) { toastr.error('Not a valid amount'); return false; }
        if (parseFloat(unstk_amt) <= 0) { toastr.error('Not a valid amount'); return false; }
        if (parseFloat(unstk_amt) > parseFloat(user_stk_bal)) { toastr.error('Not enough tokens staked'); return false; }
        let unstk_amt_val = unstk_amt * 1e18;
        //console.log(unstk_amt_val)
        $('.unstk_mod_btn').html('UNStaking...'); $('.unstk_mod_txt').attr("disabled", true);
        $('.unstk_mod_btn').html('unstaking...').prop('disabled', true)
        var result = await farmingContractInstance.methods.withdraw(unstk_amt_val).send({
            from: selectedAccount,
            to: tmac_contract_address,
            gasPrice: 10000000000,
            gasLimit: 1000000,
            //value : 0,       
        });
        if (result.status) {
            $('.unstk_mod_btn').html('UNSTAKE'); $('.unstk_mod_txt').attr("disabled", false);
            $("#unstake_modal").modal("hide");
            toastr.success('Transaction Initiated. Check status on <a href="' + bscscanTxURL + result.transactionHash + '" target="_blank">BscScan</a>');
        } else {
            toastr.error('Transaction Failed. Try Again.');
            $('.unstk_mod_btn').html('UNSTAKE'); $('.unstk_mod_txt').attr("disabled", false);
        }
    });
    $('.wid_btn').click(async function () {
        var result = await farmingContractInstance.methods.getReward().send({
            from: selectedAccount,
            to: farming_contract,
            gasPrice: 10000000000,
            gasLimit: 1000000,
            //value : 0,       
        });
        if (result.status) {
            toastr.success('Transaction Initiated. Check status on <a href="' + bscscanTxURL + result.transactionHash + '" target="_blank">BscScan</a>');
            $('#btnWithdraw2').show();$('.wid_sec').hide();
        } else {
            toastr.error('Transaction Failed. Try Again.');
        }
    });
    $('.ext_btn').click(async function () {
        var result = await farmingContractInstance.methods.exit().send({
            from: selectedAccount,
            to: farming_contract,
            gasPrice: 10000000000,
            gasLimit: 1000000,
            //value : 0,       
        });
        if (result.status) {
            toastr.success('Transaction Initiated. Check status on <a href="' + bscscanTxURL + result.transactionHash + '" target="_blank">BscScan</a>');
            $('#btnWithdraw2').show();$('.wid_sec').hide();
        } else {
            toastr.error('Transaction Failed. Try Again.');
        }
    });
</script>